#!/bin/bash

set -e

# Demande du r√©pertoire source et destination √† l'utilisateur
read -p "Veuillez entrer le chemin du r√©pertoire source : " SOURCE
read -p "Veuillez entrer le chemin du r√©pertoire de destination : " DEST

# V√©rification de l'existence des r√©pertoires
if [ ! -d "$SOURCE" ]; then
  echo "Erreur : Le r√©pertoire source n'existe pas."
  exit 1
fi

if [ ! -d "$DEST" ]; then
  echo "Erreur : Le r√©pertoire de destination n'existe pas."
  exit 1
fi

# Dossier temporaire
TMP_DIR="/media/VOLUME1/$(date +%Y%m%d%H%M%S)_temp"  # Temp directory
echo "üóÇ Cr√©ation du dossier temporaire : $TMP_DIR"
mkdir -p "$TMP_DIR"

# Option de verbosit√© (afficher les d√©tails)
VERBOSE=true

# Fonction pour nettoyer les chemins en ne rempla√ßant que les caract√®res ill√©gaux
sanitize_path() {
  local path="$1"
  local filename=$(basename "$path")
  local dirname=$(dirname "$path")

  # Extraire le nom et extension sans couper les parties importantes
  local name="${filename%.*}"
  local ext="${filename##*.}"

  # Si le nom contient un point (pas d'extension ou autre), ne pas couper
  if [[ "$filename" == "$name" ]]; then
    clean_filename=$(echo "$filename" | sed 's/[\/:*?"<>|\\]/-/g') 
  else
    # Remplacer uniquement les caract√®res ill√©gaux dans le nom de fichier (sans toucher √† l'extension)
    clean_name=$(echo "$name" | sed 's/[\/:*?"<>|\\]/-/g')
    clean_filename="${clean_name}.${ext}"
  fi

  # Nettoyer les noms de dossiers aussi
  clean_dir=$(echo "$dirname" | sed 's/[\/:*?"<>|\\]/-/g')

  # Renvoie le chemin nettoy√© sans ajouter de pr√©fixe inutile
  echo "$clean_dir/$clean_filename"
}

export -f sanitize_path
export SOURCE
export TMP_DIR
export VERBOSE

# Affichage des fichiers d√©j√† pr√©sents dans la destination
echo "üìë V√©rification des fichiers d√©j√† pr√©sents dans la destination :"
find "$DEST" -type f | while read -r dest_file; do
  if [ "$VERBOSE" = true ]; then
    echo "  - $dest_file (d√©j√† pr√©sent dans la destination)"
  fi
done

echo "üîÑ Traitement des fichiers √† nettoyer :"
# Exclure les fichiers commen√ßant par "._" et les r√©pertoires "@eaDir"
find "$SOURCE" -type f ! -name '._*' ! -path '*/@eaDir/*' | while read -r filepath; do
  # V√©rification si le fichier contient un caract√®re ill√©gal
  if echo "$filepath" | grep -q '[/:*?"<>|\\.]'; then
    rel_path="${filepath#$SOURCE}"
    sanitized_path=$(sanitize_path "$rel_path")
    
    # Enlever un √©ventuel pr√©fixe "./" du chemin (correction de la commande sed)
    sanitized_path=$(echo "$sanitized_path" | sed 's#^\.\/##')

    temp_path="$TMP_DIR/$sanitized_path"
    dest_path="$DEST/$sanitized_path"

    # Corriger le double slash
    dest_path=$(echo "$dest_path" | sed 's#//#/#g')

    # V√©rifier si le fichier existe d√©j√† dans la destination
    if [ -f "$dest_path" ]; then
      # Comparer la taille des fichiers source et destination
      source_size=$(stat -c %s "$filepath")
      dest_size=$(stat -c %s "$dest_path")

      if [ "$source_size" -ne "$dest_size" ]; then
        if [ "$VERBOSE" = true ]; then
          echo "üìÑ Fichier existant, mais taille diff√©rente, remplacement n√©cessaire : $filepath -> $sanitized_path"
        fi

        # Cr√©er les r√©pertoires n√©cessaires dans le dossier temporaire et la destination
        mkdir -p "$(dirname "$temp_path")"
        mkdir -p "$(dirname "$dest_path")"

        # Copie le fichier dans le dossier temporaire avec rsync
        rsync -av --ignore-existing "$filepath" "$temp_path"

        # Copie du fichier vers la destination avec rsync
        rsync -av --ignore-existing "$temp_path" "$dest_path"

        # Supprimer le fichier temporaire apr√®s la copie vers la destination
        rm -f "$temp_path"
      else
        if [ "$VERBOSE" = true ]; then
          echo "üìë Le fichier existe d√©j√† dans la destination et a la m√™me taille, ignor√© : $dest_path"
        fi
      fi
    else
      # Si le fichier n'existe pas dans la destination, on le copie
      mkdir -p "$(dirname "$temp_path")"
      mkdir -p "$(dirname "$dest_path")"

      # Copie le fichier dans le dossier temporaire avec rsync
      rsync -av --ignore-existing "$filepath" "$temp_path"

      # Copie du fichier vers la destination avec rsync
      rsync -av --ignore-existing "$temp_path" "$dest_path"

      # Supprimer le fichier temporaire apr√®s la copie vers la destination
      rm -f "$temp_path"
    fi
  else
    if [ "$VERBOSE" = true ]; then
      echo "üìë Aucun nettoyage n√©cessaire pour : $filepath"
    fi
  fi
done

# Suppression du dossier temporaire apr√®s traitement de tous les fichiers
echo "üßπ Suppression du dossier temporaire : $TMP_DIR"
rm -rf "$TMP_DIR"

echo "‚úÖ Traitement termin√© avec succ√®s."
